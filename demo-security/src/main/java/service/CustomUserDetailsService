@Service

public class CustomUserDetailsService implements UserDetailsService {
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
    
    @Bean
    public UserDetailsService userDetailsService(){
        var userAdmin = User.withUsername("admin").password(passwordEncoder().encode("admin")).authorities("ADMIN").build();
        var userSales = User.withUsername("sales").password(passwordEncoder().encode("sales")).authorities("SALES").build();
        var user = User.withUsername("user").password(passwordEncoder().encode("user")).authorities("USER").build();
        return new InMemoryUserDetailsManager(userAdmin, userSales, user);
    }

    @Override
    @Autowired
    private UserRepository userRepository;
    @Override
    public UserDetails loadUserByUsername(String username)throws UsernameNotFoundException{
        User u = userRepository.getUserByUsername(username);
        if (u == null) {
            throw new UsernameNotFoundException("Could not find user");
        }
    Set<GrantedAuthority> authorities = u.getRoles().stream().map((role) -> newSimpleGrantedAuthority(role.getName())).collect(Collectors.toSet());
    return new
    org.springframework.security.core.userdetails.User(
        username,
        u.getPassword(),
        authorities
    );
}


    
}